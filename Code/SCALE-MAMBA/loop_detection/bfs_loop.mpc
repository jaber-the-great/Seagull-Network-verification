from datetime import datetime

MAX_NODES = 10000
NumOfNodes =  10
DestNode = NumOfNodes

edges = sint.Matrix(NumOfNodes , 2)
edges[0][0] = 1
edges[0][1] = 3
edges[1][0] = 2
edges[1][1] = 5
edges[2][0] = 3
edges[2][1] = 5
edges[3][0] = 4
edges[3][1] = 6
edges[4][0] = 5
edges[4][1] = 6
edges[5][0] = 6
edges[5][1] = 10
edges[6][0] = 8
edges[6][1] = 9
edges[7][0] = 9
edges[7][1] = 10
edges[8][0] = 7
edges[8][1] = 3


#visited set
visited_set = Array(MAX_NODES,sint)

#visited order
order = Array(NumOfNodes+1,sint)

order[0] = DestNode


cnt = 1
flag1 = True
start_time = datetime.now()

@do_while flag1:
def loop_body():
    flag1 = False
    @for_range(NumOfNodes-1)
    def range_body(i):
        for i in range(NumOfNodes-1):
            if_then (visited_set[edges[i][1]] == 1 and visited_set[edges[i][0] == 0):
                order[cnt] = edges[i][0]
	        visited_set[edges[i][0] = 1
                cnt = cnt+1
                flag1=True
            end_if()
    return flag1 == False

print_ln("The visited nodes in BFS order:")
@for_range(len(visited))
def range_body(i):
    print_ln("[%s]:  %s", i,  order[i].reveal())

print_ln("The number of visited nodes: %d" % (cnt))
if cnt == NumOfNodes:
    print_ln("The network is loop free")
else:
    print_ln("The network  is NOT loop free")

end_time = datetime.now()
print_ln('Duration: {}'.format(end_time - start_time))

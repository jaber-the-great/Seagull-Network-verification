from datetime import datetime
MaxEdges   = 4802
MaxNodes   = 4802

print_ln("Start executing")
start_timer(1)

ch5=regint(5)
open_channel_with_return(ch5)

NumOfNodes =  sint.get_private_input_from(0,5).reveal()
DestNode   =  sint.get_private_input_from(0,5).reveal()
NumOfEdges =  NumOfNodes - 1

print_ln("Nodes = %s, Dest = %s", NumOfNodes, DestNode)


###################################
# loop detection using whole graph
###################################

edges = sint.Matrix(MaxEdges, 2)


print_ln("STARTED")
#for i in range(NumOfEdges):
@for_range(NumOfEdges)
def loop_body0(i):
    edges[i][0] =  sint.get_private_input_from(0,5)
    edges[i][1] =  sint.get_private_input_from(0,5)
    print_ln("%s ==> %s", edges[i][0].reveal(), edges[i][1].reveal())


close_channel(ch5)




visited = Array(MaxNodes,sint)
visited[0] = DestNode

cnt = MemValue(1)
flag1 = MemValue(1)
found0 = MemValue(0)
found1 = MemValue(0)

@do_while
def loop_body1():
    flag1.write(0)
    @for_range(NumOfEdges)
    def loop_body2(i):
        print_ln("processing edge %s: %s, %s", i, edges[i][0].reveal(), edges[i][1].reveal())

        found0.write(0)
        @for_range(cnt)
        def loop_body3(j):
            #print_ln("found0: visited[j] = %s, edge[0]= %s ", visited[j].reveal(), edges[i][0].reveal())
            if_then((visited[j] == edges[i][0]).reveal())
            #print_ln("found0: visited[j] = %s", visited[j].reveal())
            found0.write(1)
            end_if()

        if_then ((found0 == 0).reveal()) 
        found1.write(0)
        @for_range(cnt)
        def loop_body4(j):
            if_then((visited[j] == edges[i][1]).reveal())
            #print_ln("found1: visited[j] = %s", visited[j].reveal())
            found1.write(1)
            end_if()
             
        if_then ((found1 == 1).reveal())
        visited[cnt] = edges[i][0]
        cnt.write(cnt+1)
        flag1.write(1)
        print_ln("visiting %s => node[%s] = %s ", edges[i][1].reveal(), cnt, edges[i][0].reveal())
        end_if()

        end_if()

    return flag1 > 0

stop_timer(1)

print_ln("The visited nodes in BFS order:")

@for_range(cnt)
def loop_body5(i):
    print_ln("%s,", visited[i].reveal())

print_ln("The number of visited nodes: %s", cnt)
if_then(cnt == NumOfNodes)
print_ln("The network is loop free")
else_then()
print_ln("The network  is NOT loop free")
end_if()


###################################
# Handle query from another Party
###################################

print_ln("getting input from Party 1 to modify an edge")
ch15=regint(15)
open_channel_with_return(ch15)
update    =  sint.get_private_input_from(1,15)
src       =  sint.get_private_input_from(1,15)
dst       =  sint.get_private_input_from(1,15)

start_timer(2)

print_ln("Update edge %s, %s, %s", update.reveal(), src.reveal(), dst.reveal())
close_channel(ch15)

idx = update.reveal()
edges[idx][0] = src
edges[idx][1] = dst


print_ln("updated edge list")
@for_range(NumOfEdges)
def loop_body6(i):
    print_ln("%s => %s ", edges[i][0].reveal(), edges[i][1].reveal())


hops = MemValue(cint(0))
currentNode = MemValue(sint(0))
nextNode = MemValue(sint(0))
runningFlag = MemValue(1)

currentNode.write(src)

@do_while
def loop_body():
    hops.write(hops+1)
    runningFlag.write(0)

    @for_range(NumOfEdges)
    def loop_body(i):
        global currentNode
        if_then((edges[i][0] == currentNode).reveal())
        nextNode.write(edges[i][1])
        runningFlag.write(1)
        end_if()

    if_then(runningFlag == 1)
    currentNode = nextNode
    hops.write(hops + 1)
    end_if()

    print_ln("loop : current node = %s, hops = %s, runningFlag = %s",currentNode.reveal(), hops, runningFlag)

    if_then((currentNode == DestNode).reveal())
    runningFlag.write(0)
    end_if()

    if_then(hops>15)
    runningFlag.write(0)
    end_if()

    return runningFlag > 0

if_then((currentNode == DestNode).reveal())
print_ln("Reached destination in %s hops", hops)
else_then()
print_ln("A loop will be Loop detected if the edge is updated")
end_if()
stop_timer(2)
